# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–æ–∫
from HELPERS.app_instance import get_app
from HELPERS.logger import logger
from CONFIG.messages import safe_get_messages
from HELPERS.safe_messeger import safe_send_message
from CONFIG.config import Config
from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

app = get_app()

@app.on_message(filters.command("status") & filters.private)
async def status_command(app, message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in Config.ADMIN:
        await safe_send_message(user_id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        from HELPERS.concurrent_limiter import concurrent_limiter
        status = await concurrent_limiter.get_status()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫</b>\n\n"
        status_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: <b>{status['active_downloads']}</b>\n"
        status_text += f"üìà –ú–∞–∫—Å–∏–º—É–º: <b>{status['max_concurrent']}</b>\n"
        status_text += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: <b>{status['available_slots']}</b>\n"
        
        if status['users']:
            status_text += f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–≥—Ä—É–∑–∫–∞–º–∏:\n"
            for user in status['users']:
                status_text += f"‚Ä¢ <code>{user}</code>\n"
        else:
            status_text += f"\nüí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_refresh")]
        ])
        
        await safe_send_message(
            user_id, 
            status_text, 
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in status_command: {e}")
        await safe_send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@app.on_callback_query(filters.regex(r"^status_refresh$"))
async def status_refresh_callback(app, callback_query):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫"""
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in Config.ADMIN:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        from HELPERS.concurrent_limiter import concurrent_limiter
        status = await concurrent_limiter.get_status()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫</b>\n\n"
        status_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: <b>{status['active_downloads']}</b>\n"
        status_text += f"üìà –ú–∞–∫—Å–∏–º—É–º: <b>{status['max_concurrent']}</b>\n"
        status_text += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: <b>{status['available_slots']}</b>\n"
        
        if status['users']:
            status_text += f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–≥—Ä—É–∑–∫–∞–º–∏:\n"
            for user in status['users']:
                status_text += f"‚Ä¢ <code>{user}</code>\n"
        else:
            status_text += f"\nüí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_refresh")]
        ])
        
        await callback_query.edit_message_text(
            status_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in status_refresh_callback: {e}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
