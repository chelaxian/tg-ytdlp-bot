# PO Token Helper for YouTube
# Adds PO token provider support for YouTube domains

import asyncio
from HELPERS.http_client import fetch_json
import time
import re
from CONFIG.config import Config
from CONFIG.messages import Messages, safe_get_messages
from URL_PARSERS.youtube import is_youtube_url
from HELPERS.logger import logger

# –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
_pot_provider_cache = {
    'available': None,
    'last_check': 0,
    'check_interval': 30  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

async def check_pot_provider_availability(base_url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    
    Args:
        base_url (str): URL –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
    """
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (_pot_provider_cache['available'] is not None and 
        current_time - _pot_provider_cache['last_check'] < _pot_provider_cache['check_interval']):
        return _pot_provider_cache['available']
    
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        # PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404 –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏, –Ω–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.head(base_url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                    is_available = response.status in [200, 404]  # 404 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                    status_code = response.status
        except Exception:
            is_available = False
            status_code = None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        _pot_provider_cache['available'] = is_available
        _pot_provider_cache['last_check'] = current_time
        
        if is_available:
            logger.info(f"PO token provider is available at {base_url} (status: {status_code})")
        else:
            logger.warning(f"PO token provider returned status {status_code} at {base_url}")
        
        return is_available
        
    except Exception as e:
        logger.warning(f"PO token provider is not available at {base_url}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        _pot_provider_cache['available'] = False
        _pot_provider_cache['last_check'] = current_time
        
        return False

async def add_pot_to_ytdl_opts(ytdl_opts: dict, url: str) -> dict:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç PO token –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫ yt-dlp –æ–ø—Ü–∏—è–º –¥–ª—è YouTube –¥–æ–º–µ–Ω–æ–≤
    
    Args:
        ytdl_opts (dict): –°–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π yt-dlp
        url (str): URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π yt-dlp
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    if not getattr(Config, 'YOUTUBE_POT_ENABLED', False):
        messages = safe_get_messages()
        logger.info(messages.HELPER_POT_PROVIDER_DISABLED_MSG)
        return ytdl_opts
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL YouTube –¥–æ–º–µ–Ω–æ–º
    if not is_youtube_url(url):
        messages = safe_get_messages()
        logger.info(messages.HELPER_POT_URL_NOT_YOUTUBE_MSG.format(url=url))
        return ytdl_opts
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    base_url = getattr(Config, 'YOUTUBE_POT_BASE_URL', 'http://127.0.0.1:4416')
    disable_innertube = getattr(Config, 'YOUTUBE_POT_DISABLE_INNERTUBE', False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if not await check_pot_provider_availability(base_url):
        messages = safe_get_messages()
        logger.warning(messages.HELPER_POT_PROVIDER_NOT_AVAILABLE_MSG.format(base_url=base_url))
        return ytdl_opts

    # –î–æ–±–∞–≤–ª—è–µ–º extractor_args –∫ –æ–ø—Ü–∏—è–º yt-dlp
    if 'extractor_args' not in ytdl_opts:
        ytdl_opts['extractor_args'] = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è YouTube PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (nightly ‚â• 2025-09-13)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
    # extractor_args: {
    #   'youtubepot': {
    #       'providers': ['bgutilhttp'],
    #       'bgutilhttp': { 'base_url': ['http://...'] },
    #       'disable_innertube': ['1']  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    #   }
    # }
    pot_args = ytdl_opts['extractor_args'].get('youtubepot', {})
    pot_args['providers'] = list(dict.fromkeys((pot_args.get('providers') or []) + ['bgutilhttp']))
    bg_cfg = pot_args.get('bgutilhttp', {})
    bg_cfg['base_url'] = [base_url]
    pot_args['bgutilhttp'] = bg_cfg
    if disable_innertube:
        pot_args['disable_innertube'] = ["1"]
    ytdl_opts['extractor_args']['youtubepot'] = pot_args
    
    # –î–æ–±–∞–≤–ª—è–µ–º verbose —Ä–µ–∂–∏–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è PO —Ç–æ–∫–µ–Ω–æ–≤
    ytdl_opts['verbose'] = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PO —Ç–æ–∫–µ–Ω–æ–≤
    ytdl_opts = add_pot_debug_hook(ytdl_opts)
    
    # –Ø–≤–Ω—ã–µ –ª–æ–≥–∏, —á—Ç–æ–±—ã –≤–∏–¥–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    active_providers = ytdl_opts['extractor_args'].get('youtubepot', {}).get('providers', [])
    logger.info(f"üîë PO TOKEN PROVIDER ENABLED for YouTube URL: {url}")
    logger.info(f"üîó PO Token Base URL: {base_url}")
    logger.info(f"üß© PO Token Providers: {active_providers}")
    logger.info(f"‚öôÔ∏è  PO Token Config: disable_innertube={disable_innertube}")
    logger.info(f"üìã extractor_args.youtubepot: {ytdl_opts['extractor_args'].get('youtubepot')}")
    
    return ytdl_opts

def is_pot_enabled() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω, False –∏–Ω–∞—á–µ
    """
    return getattr(Config, 'YOUTUBE_POT_ENABLED', False)

def get_pot_base_url() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    
    Returns:
        str: –ë–∞–∑–æ–≤—ã–π URL –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    """
    return getattr(Config, 'YOUTUBE_POT_BASE_URL', 'http://127.0.0.1:4416')

def clear_pot_provider_cache():
    messages = safe_get_messages(None)
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    """
    global _pot_provider_cache
    _pot_provider_cache['available'] = None
    _pot_provider_cache['last_check'] = 0
    messages = safe_get_messages()
    logger.info(messages.HELPER_POT_PROVIDER_CACHE_CLEARED_MSG)

def is_pot_provider_available() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ PO token –ø—Ä–æ–≤–∞–π–¥–µ—Ä (—Å —É—á–µ—Ç–æ–º –∫—ç—à–∞)
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
    """
    base_url = getattr(Config, 'YOUTUBE_POT_BASE_URL', 'http://127.0.0.1:4416')
    return check_pot_provider_availability(base_url)

def create_pot_debug_hook():
    messages = safe_get_messages(None)
    """
    –°–æ–∑–¥–∞–µ—Ç —Ö—É–∫ –¥–ª—è yt-dlp, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç PO —Ç–æ–∫–µ–Ω—ã
    
    Returns:
        function: –•—É–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è yt-dlp
    """
    def pot_debug_hook(d):
        messages = safe_get_messages(None)
        """
        –•—É–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏—è PO —Ç–æ–∫–µ–Ω–æ–≤ –≤ yt-dlp
        
        Args:
            d (dict): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ
        """
        if d['status'] == 'downloading':
            # –ò—â–µ–º PO —Ç–æ–∫–µ–Ω—ã –≤ URL –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            if 'url' in d:
                url = d['url']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PO —Ç–æ–∫–µ–Ω–æ–≤ –≤ URL
                pot_patterns = [
                    r'po_token=([^&]+)',
                    r'popt=([^&]+)',
                    r'pot=([^&]+)',
                    r'proof_of_origin=([^&]+)'
                ]
                
                for pattern in pot_patterns:
                    match = re.search(pattern, url)
                    if match:
                        token = match.group(1)
                        logger.info(f"üéØ PO TOKEN DETECTED in URL: {token[:20]}...")
                        logger.info(f"üîó Full URL with PO token: {url}")
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ PO —Ç–æ–∫–µ–Ω–æ–≤
                if 'http_headers' in d:
                    headers = d['http_headers']
                    for header_name, header_value in headers.items():
                        if 'po' in header_name.lower() or 'token' in header_name.lower():
                            logger.info(f"üéØ PO TOKEN in header {header_name}: {header_value}")
        
        elif d['status'] == 'finished':
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å PO —Ç–æ–∫–µ–Ω–∞–º–∏
            messages = safe_get_messages()
            logger.info(messages.HELPER_DOWNLOAD_FINISHED_PO_MSG)
            
    return pot_debug_hook

def add_pot_debug_hook(ytdl_opts: dict) -> dict:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ö—É–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PO —Ç–æ–∫–µ–Ω–æ–≤ –∫ –æ–ø—Ü–∏—è–º yt-dlp
    
    Args:
        ytdl_opts (dict): –°–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π yt-dlp
        
    Returns:
        dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π yt-dlp
    """
    if 'progress_hooks' not in ytdl_opts:
        ytdl_opts['progress_hooks'] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à —Ö—É–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PO —Ç–æ–∫–µ–Ω–æ–≤
    ytdl_opts['progress_hooks'].append(create_pot_debug_hook())
    
    return ytdl_opts

def build_cli_extractor_args(url: str) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã CLI –¥–ª—è yt-dlp (--extractor-args) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PO token.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∞ ["--extractor-args", VALUE], –ª–∏–±–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –∏ –¥–æ–º–µ–Ω
        if not getattr(Config, 'YOUTUBE_POT_ENABLED', False):
            return []
        if not is_youtube_url(url):
            return []
        base_url = getattr(Config, 'YOUTUBE_POT_BASE_URL', 'http://127.0.0.1:4416')
        disable_innertube = getattr(Config, 'YOUTUBE_POT_DISABLE_INNERTUBE', False)

        # CLI —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –ø–æ–¥–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: youtubepot-bgutilhttp:base_url=...;disable_innertube=1
        pot_segment = f"youtubepot-bgutilhttp:base_url={base_url}"
        if disable_innertube:
            pot_segment += ";disable_innertube=1"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ extractor-args (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–µ–∂–¥—É –Ω–µ–π–º—Å–ø–µ–π—Å–∞–º–∏)
        messages = safe_get_messages()
        generic_args = messages.HELPER_POT_GENERIC_ARGS_MSG
        value = ",".join([pot_segment, generic_args])
        logger.info(f"üß± CLI extractor-args built for POT: {value}")
        return ['--extractor-args', value]
    except Exception as e:
        logger.warning(f"Failed to build CLI extractor-args for POT: {e}")
        return []
