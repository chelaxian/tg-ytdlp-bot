from CONFIG.messages import Messages, safe_get_messages

class LoggerMsg(object):
    # Generic user/admin/access - removed unused variables

    # Removed unused variables
    
    # Missing variables that are used in code
    COOKIES_YOUTUBE_ALL_SOURCES_FAILED_ERROR_LOG_MSG = "Error logging: {e}"
    COOKIES_YOUTUBE_DOWNLOAD_EXCEPTION_LOG_MSG = "Exception during YouTube cookie download: {e}"
    COOKIES_YOUTUBE_FROM_SOURCE_FAILED_VALIDATION_LOG_MSG = "YouTube cookies from source {source_index} failed validation"
    
    # Removed - these are user messages, not logger messages
    
    # URL Extractor / start logs
    USER_STARTED_BOT = "{chat_id} - user started the bot"
    HELP_SENT_TO_USER = "Send help txt to user"
    ADD_BOT_TO_GROUP_SENT = "Send add_bot_to_group txt to user"

    # Image command logs
    IMG_HELP_SHOWN = "Showed /img help"
    INVALID_URL_PROVIDED = "Invalid URL provided: {url}"
    REPOSTED_CACHED_ALBUMS = "Reposted {count} cached albums for {url}"
    STREAMED_AND_SENT_MEDIA = "Streamed and sent {total_sent} media: {url}"
    IMAGE_COMMAND_ERROR = "Error in image command: {url}, error: {error}"
    
    # Image file date logs
    IMG_FILE_DATE_UNIX_EPOCH_INVALID_LOG_MSG = "[FILE_DATE] Date {date_str} is Unix epoch - invalid"
    IMG_FILE_DATE_TODAY_VALID_LOG_MSG = "[FILE_DATE] Date {date_str} is today's date from {source_context} - valid"
    IMG_FILE_DATE_TODAY_LIKELY_INVALID_LOG_MSG = "[FILE_DATE] Date {date_str} is today's date from {source_context} - likely invalid (file modification time)"
    IMG_FILE_DATE_EXTRACT_FROM_FILENAME_LOG_MSG = "[FILE_DATE] Trying to extract date from filename: {filename}"
    IMG_FILE_DATE_CLEANED_NAME_LOG_MSG = "[FILE_DATE] Cleaned name: {clean_name}, isdigit: {isdigit}, len: {length}"
    IMG_FILE_DATE_INSTAGRAM_ID_DETECTED_LOG_MSG = "[FILE_DATE] Instagram ID detected: {clean_name} - returning None (no reliable date)"
    IMG_FILE_DATE_ORIGINAL_NAME_LOG_MSG = "[FILE_DATE] Original name: {name_without_ext}, isdigit: {isdigit}, len: {length}"
    IMG_FILE_DATE_ORIGINAL_INSTAGRAM_ID_DETECTED_LOG_MSG = "[FILE_DATE] Original Instagram ID detected: {name_without_ext} - returning None (no reliable date)"
    IMG_FILE_DATE_FOUND_IN_FILENAME_LOG_MSG = "[FILE_DATE] Found date in filename: {date_str}"
    IMG_FILE_DATE_INVALID_CONTINUING_SEARCH_LOG_MSG = "[FILE_DATE] Date {date_str} is invalid, continuing search"
    IMG_FILE_DATE_CREATED_TODAY_LOG_MSG = "[FILE_DATE] File created today, likely fake message fallback - returning None"
    IMG_FILE_DATE_USING_MODIFICATION_TIME_LOG_MSG = "[FILE_DATE] Using file modification time: {date_str}"
    IMG_FILE_DATE_MODIFICATION_INVALID_LOG_MSG = "[FILE_DATE] File modification date {date_str} is invalid"

    # Search helper logs
    SEARCH_HELPER_OPENED = "User {user_id} opened search helper"
    SEARCH_HELPER_CLOSED = "User {user_id} closed search command"
    SEARCH_CALLBACK_ERROR = "Error in search callback handler: {error}"

    # Cache and sends
    PLAYLIST_VIDEOS_SENT_FROM_CACHE = "Playlist videos sent from cache (quality={quality}) to user {user_id}"
    VIDEO_SENT_FROM_CACHE = "Video sent from cache (quality={quality}) to user {user_id}"
    PLAYLIST_AUDIO_SENT_FROM_CACHE = "Playlist audio sent from cache (quality={quality}) to user {user_id}"
    AUDIO_SENT_FROM_CACHE = "Audio sent from cache (quality={quality}) to user {user_id}"

    # Limits and errors
    DOWNLOAD_TIMEOUT_LOG = "Download cancelled due to timeout"
    
    # Cookies command logs
    COOKIES_FAILED_START_BROWSER_LOG_MSG = "Failed to start cookies_from_browser: {e}"
    COOKIES_ERROR_FAST_COMMAND_LOG_MSG = "Error in fast command handling: {e}"
    COOKIES_YOUTUBE_TEST_FAILED_NO_INFO_LOG_MSG = "YouTube cookies test failed on user URL - no info returned for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_MISSING_INFO_LOG_MSG = "YouTube cookies test failed on user URL - missing basic info for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_INSUFFICIENT_FORMATS_LOG_MSG = "YouTube cookies test failed on user URL - insufficient formats ({formats_count}) for {cookie_file_path}"
    COOKIES_YOUTUBE_COOKIES_WORK_LOG_MSG = "YouTube cookies work on user URL for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_USER_URL_LOG_MSG = "YouTube cookies test failed on user URL for {cookie_file_path}: {e}"
    COOKIES_YOUTUBE_TEST_FAILED_NO_INFO_RETURNED_LOG_MSG = "YouTube cookies test failed - no info returned for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_MISSING_FIELDS_LOG_MSG = "YouTube cookies test failed - missing fields: {missing_fields} for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_AVAILABLE_FIELDS_LOG_MSG = "Available fields: {available_fields}"
    COOKIES_YOUTUBE_TEST_FAILED_NO_FORMATS_LOG_MSG = "YouTube cookies test failed - no formats available for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_INFO_KEYS_LOG_MSG = "Info keys: {info_keys}"
    COOKIES_YOUTUBE_TEST_FAILED_TITLE_TOO_SHORT_LOG_MSG = "YouTube cookies test failed - title too short: '{title}' for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_TITLE_LENGTH_LOG_MSG = "Title length: {title_length}"
    COOKIES_YOUTUBE_TEST_FAILED_INVALID_DURATION_LOG_MSG = "YouTube cookies test failed - invalid duration: {duration} for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_DURATION_SECONDS_LOG_MSG = "Duration in seconds: {duration}"
    COOKIES_YOUTUBE_TEST_FAILED_TOO_FEW_FORMATS_LOG_MSG = "YouTube cookies test failed - too few formats: {formats_count} for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_AVAILABLE_FORMATS_LOG_MSG = "Available formats: {available_formats}"
    COOKIES_YOUTUBE_TEST_FAILED_ALL_FORMAT_IDS_LOG_MSG = "All format IDs: {all_format_ids}"
    COOKIES_YOUTUBE_TEST_PASSED_LOG_MSG = "YouTube cookies test passed for {cookie_file_path} - {formats_count} formats available"
    COOKIES_YOUTUBE_TEST_TITLE_LOG_MSG = "Title: '{title}'"
    COOKIES_YOUTUBE_TEST_DURATION_LOG_MSG = "Duration: {duration}s"
    COOKIES_YOUTUBE_TEST_UPLOADER_LOG_MSG = "Uploader: {uploader}"
    COOKIES_YOUTUBE_TEST_VIEW_COUNT_LOG_MSG = "View count: {view_count}"
    COOKIES_YOUTUBE_TEST_UPLOAD_DATE_LOG_MSG = "Upload date: {upload_date}"
    COOKIES_YOUTUBE_TEST_LIKE_COUNT_LOG_MSG = "Like count: {like_count}"
    COOKIES_YOUTUBE_TEST_FORMAT_IDS_LOG_MSG = "Format IDs: {format_ids}"
    COOKIES_YOUTUBE_TEST_UNAVAILABLE_LOG_MSG = "YouTube test video is unavailable (not a cookie issue): {e}"
    COOKIES_YOUTUBE_TEST_AUTH_ERROR_LOG_MSG = "YouTube cookies test failed - authentication/format error: {e}"
    COOKIES_YOUTUBE_TEST_OTHER_ERROR_LOG_MSG = "YouTube cookies test - other error (may not be cookie-related): {e}"
    COOKIES_YOUTUBE_TEST_EXCEPTION_LOG_MSG = "YouTube cookies test failed with exception: {e}"
    COOKIES_YOUTUBE_TEST_EXCEPTION_TYPE_LOG_MSG = "Exception type: {exception_type}"
    COOKIES_CANNOT_DETERMINE_USER_ID_LOG_MSG = "Cannot determine user_id from message object"
    COOKIES_ERROR_SENDING_MESSAGE_LOG_MSG = "Error sending message to user: {e}"
    COOKIES_FINAL_FALLBACK_SEND_FAILED_LOG_MSG = "Final fallback send failed: {e2}"
    COOKIES_YOUTUBE_URLS_EMPTY_LOG_MSG = "YouTube cookie URLs are empty for user {user_id}"
    COOKIES_ERROR_LOGGING_LOG_MSG = "Error logging: {e}"
    COOKIES_ERROR_SENDING_INITIAL_MESSAGE_LOG_MSG = "Error sending initial message: {e}"
    COOKIES_ERROR_UPDATING_MESSAGE_LOG_MSG = "Error updating message: {e}"
    COOKIES_YOUTUBE_COOKIE_ORDER_MODE_LOG_MSG = "YouTube cookie order mode: {order}"
    COOKIES_YOUTUBE_COOKIE_INDICES_ORDER_LOG_MSG = "YouTube cookie indices order: {indices}"
    COOKIES_YOUTUBE_DOWNLOAD_FAILED_LOG_MSG = "Failed to download YouTube cookie from URL {url_index}: status={status}, error={error}"
    COOKIES_YOUTUBE_URL_NOT_TXT_LOG_MSG = "YouTube cookie URL {url_index} is not .txt file"
    COOKIES_YOUTUBE_FILE_TOO_LARGE_LOG_MSG = "YouTube cookie file {url_index} is too large: {file_size} bytes"
    COOKIES_YOUTUBE_DOWNLOADED_VALIDATED_LOG_MSG = "YouTube cookies downloaded and validated for user {user_id} from source {source_index}"
    # Removed unused COOKIES_YOUTUBE_* variables
    COOKIES_YOUTUBE_CACHE_VALID_LOG_MSG = "Using cached YouTube cookie validation result for user {user_id} (cache valid for {cache_duration}s)"
    COOKIES_YOUTUBE_STARTING_ENSURE_LOG_MSG = "Starting ensure_working_youtube_cookies for user {user_id}"
    COOKIES_YOUTUBE_CHECKING_EXISTING_LOG_MSG = "Checking existing YouTube cookies for user {user_id}"
    COOKIES_YOUTUBE_EXISTING_WORKING_LOG_MSG = "Existing YouTube cookies are working for user {user_id}"
    COOKIES_YOUTUBE_FINISHED_EXISTING_WORKING_LOG_MSG = "Finished ensure_working_youtube_cookies for user {user_id} - existing cookies are working"
    COOKIES_YOUTUBE_EXISTING_FAILED_LOG_MSG = "Existing YouTube cookies failed test for user {user_id}, will try to update"
    COOKIES_YOUTUBE_NO_SOURCES_CONFIGURED_LOG_MSG = "No YouTube cookie sources configured for user {user_id}"
    COOKIES_YOUTUBE_ATTEMPTING_DOWNLOAD_LOG_MSG = "Attempting to download working YouTube cookies for user {user_id} from {sources_count} sources"
    COOKIES_YOUTUBE_TRYING_SOURCE_LOG_MSG = "Trying YouTube cookie source {source_index}/{total_sources} for user {user_id}"
    COOKIES_YOUTUBE_SOURCE_WORKING_LOG_MSG = "YouTube cookies from source {source_index} are working for user {user_id}"
    COOKIES_YOUTUBE_FINISHED_WORKING_FOUND_LOG_MSG = "Finished ensure_working_youtube_cookies for user {user_id} - working cookies found from source {source_index}"
    COOKIES_YOUTUBE_SOURCE_FAILED_VALIDATION_LOG_MSG = "YouTube cookies from source {source_index} failed validation for user {user_id}"
    COOKIES_YOUTUBE_PROCESSING_ERROR_LOG_MSG = "Error processing YouTube cookie URL {source_index} for user {user_id}: {e}"
    COOKIES_YOUTUBE_ALL_SOURCES_FAILED_REMOVING_LOG_MSG = "All YouTube cookie sources failed for user {user_id}, removing cookie file"
    COOKIES_YOUTUBE_FINISHED_NO_WORKING_LOG_MSG = "Finished ensure_working_youtube_cookies for user {user_id} - no working cookies found"
    COOKIES_YOUTUBE_RETRY_PROXY_LOG_MSG = "Attempting to retry download with proxy for user {user_id}"
    COOKIES_YOUTUBE_NO_PROXY_CONFIG_LOG_MSG = "No proxy configuration available for retry for user {user_id}"
    COOKIES_YOUTUBE_RETRY_PROXY_URL_LOG_MSG = "Retrying download with proxy: {proxy_url}"
    COOKIES_YOUTUBE_RETRY_PROXY_SUCCESS_LOG_MSG = "Download retry with proxy successful for user {user_id}"
    COOKIES_YOUTUBE_RETRY_PROXY_FAILED_LOG_MSG = "Download retry with proxy failed for user {user_id}"
    COOKIES_YOUTUBE_RETRY_PROXY_FAILED_ERROR_LOG_MSG = "Download retry with proxy failed for user {user_id}: {e}"
    COOKIES_YOUTUBE_RETRY_PROXY_SETUP_ERROR_LOG_MSG = "Error setting up proxy retry for user {user_id}: {e}"
    COOKIES_YOUTUBE_RETRY_ALREADY_IN_PROGRESS_LOG_MSG = "Retry already in progress for user {user_id}, skipping to avoid infinite loop"
    COOKIES_YOUTUBE_RETRY_DIFFERENT_COOKIES_LOG_MSG = "Attempting to retry download with different cookies for user {user_id}"
    COOKIES_YOUTUBE_RETRY_NO_SOURCES_LOG_MSG = "No YouTube cookie sources available for retry for user {user_id}"
    COOKIES_YOUTUBE_RETRY_SOURCES_ORDER_LOG_MSG = "Retrying download with cookie sources in order: {indices}"
    COOKIES_YOUTUBE_RETRY_ATTEMPT_LOG_MSG = "Retry attempt {attempt}/{total_attempts} with cookie source {source_index} for user {user_id}"
    COOKIES_YOUTUBE_RETRY_DOWNLOAD_FAILED_LOG_MSG = "Failed to download cookie from source {source_index}: status={status}, error={error}"
    COOKIES_YOUTUBE_RETRY_URL_NOT_TXT_LOG_MSG = "Cookie URL {source_index} is not .txt file"
    COOKIES_YOUTUBE_RETRY_FILE_TOO_LARGE_LOG_MSG = "Cookie file {source_index} is too large: {file_size} bytes"
    COOKIES_YOUTUBE_RETRY_SOURCE_WORKING_LOG_MSG = "Cookie source {source_index} is working, retrying download for user {user_id}"
    COOKIES_YOUTUBE_RETRY_SUCCESS_LOG_MSG = "Download retry successful with cookie source {source_index} for user {user_id}"
    COOKIES_YOUTUBE_RETRY_FAILED_LOG_MSG = "Download retry failed with cookie source {source_index} for user {user_id}"
    COOKIES_YOUTUBE_RETRY_FAILED_ERROR_LOG_MSG = "Download retry failed with cookie source {source_index} for user {user_id}: {e}"
    COOKIES_YOUTUBE_RETRY_ERROR_COOKIE_RELATED_LOG_MSG = "Error is cookie-related, trying next source for user {user_id}"
    COOKIES_YOUTUBE_RETRY_ERROR_NOT_COOKIE_RELATED_LOG_MSG = "Error is not cookie-related, stopping retry for user {user_id}"
    COOKIES_YOUTUBE_RETRY_SOURCE_FAILED_VALIDATION_LOG_MSG = "Cookie source {source_index} failed validation for user {user_id}"
    COOKIES_YOUTUBE_RETRY_PROCESSING_ERROR_LOG_MSG = "Error processing cookie source {source_index} for user {user_id}: {e}"
    COOKIES_YOUTUBE_RETRY_ALL_SOURCES_FAILED_LOG_MSG = "All cookie sources failed for retry download for user {user_id}"
    COOKIES_YOUTUBE_CACHE_CLEARED_LOG_MSG = "Cleared YouTube cookie validation cache for user {user_id}"
    COOKIES_YOUTUBE_CACHE_NO_ENTRY_LOG_MSG = "No cache entry found for user {user_id}"
    COOKIES_YOUTUBE_TEST_FAILED_MISSING_FIELDS_LOG_MSG = "YouTube cookies test failed - missing fields: {missing_fields} for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_NO_FORMATS_LOG_MSG = "YouTube cookies test failed - no formats available for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_INVALID_DURATION_LOG_MSG = "YouTube cookies test failed - invalid duration: {duration} for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_FAILED_TOO_FEW_FORMATS_LOG_MSG = "YouTube cookies test failed - too few formats: {formats_count} for {cookie_file_path}"
    COOKIES_YOUTUBE_TEST_PASSED_LOG_MSG = "YouTube cookies test passed for {cookie_file_path} - {formats_count} formats available"
    COOKIES_YOUTUBE_TEST_TITLE_LOG_MSG = "Title: '{title}'"
    COOKIES_YOUTUBE_TEST_DURATION_LOG_MSG = "Duration: {duration}s"
    COOKIES_YOUTUBE_TEST_UPLOADER_LOG_MSG = "Uploader: {uploader}"
    COOKIES_YOUTUBE_TEST_VIEW_COUNT_LOG_MSG = "View count: {view_count}"
    COOKIES_YOUTUBE_TEST_UPLOAD_DATE_LOG_MSG = "Upload date: {upload_date}"
    COOKIES_YOUTUBE_TEST_LIKE_COUNT_LOG_MSG = "Like count: {like_count}"
    COOKIES_YOUTUBE_TEST_FORMAT_IDS_LOG_MSG = "Format IDs: {format_ids}"
    COOKIES_YOUTUBE_TEST_AUTH_ERROR_LOG_MSG = "YouTube cookies test failed - authentication/format error: {e}"
    COOKIES_YOUTUBE_TEST_OTHER_ERROR_LOG_MSG = "YouTube cookies test - other error (may not be cookie-related): {e}"
    COOKIES_YOUTUBE_TEST_EXCEPTION_TYPE_LOG_MSG = "Exception type: {exception_type}"
    COOKIES_ERROR_SENDING_MESSAGE_LOG_MSG = "Error sending message to user: {e}"
    COOKIES_FINAL_FALLBACK_SEND_FAILED_LOG_MSG = "Final fallback send failed: {e}"
    COOKIES_YOUTUBE_URLS_EMPTY_LOG_MSG = "YouTube cookie URLs are empty for user {user_id}"
    COOKIES_ERROR_UPDATING_MESSAGE_LOG_MSG = "Error updating message: {e}"
    COOKIES_YOUTUBE_URL_NOT_TXT_LOG_MSG = "YouTube cookie URL {idx} is not .txt file"
    COOKIES_YOUTUBE_FILE_TOO_LARGE_LOG_MSG = "YouTube cookie file {idx} is too large: {size} bytes"
    COOKIES_YOUTUBE_DOWNLOADED_VALIDATED_LOG_MSG = "YouTube cookies downloaded and validated for user {user_id} from source {idx}"
    COOKIES_YOUTUBE_ALL_SOURCES_FAILED_LOG_MSG = "All YouTube cookie sources failed for user {user_id}"
    COOKIES_YOUTUBE_EXISTING_WORKING_LOG_MSG = "Existing YouTube cookies are working for user {user_id}"
    COOKIES_YOUTUBE_NO_SOURCES_CONFIGURED_LOG_MSG = "No YouTube cookie sources configured for user {user_id}"
    COOKIES_YOUTUBE_ATTEMPTING_DOWNLOAD_LOG_MSG = "Attempting to download working YouTube cookies for user {user_id} from {count} sources"
    COOKIES_YOUTUBE_TRYING_SOURCE_LOG_MSG = "Trying YouTube cookie source {i}/{total} for user {user_id}"
    COOKIES_YOUTUBE_SOURCE_WORKING_LOG_MSG = "YouTube cookies from source {i} are working for user {user_id}"
    COOKIES_YOUTUBE_SOURCE_FAILED_VALIDATION_LOG_MSG = "YouTube cookies from source {i} failed validation for user {user_id}"
    COOKIES_YOUTUBE_FINISHED_NO_WORKING_LOG_MSG = "Finished ensure_working_youtube_cookies for user {user_id} - no working cookies found"
    COOKIES_YOUTUBE_RETRY_PROXY_SUCCESS_LOG_MSG = "Download retry with proxy successful for user {user_id}"
    COOKIES_YOUTUBE_RETRY_PROXY_FAILED_LOG_MSG = "Download retry with proxy failed for user {user_id}"
    COOKIES_YOUTUBE_RETRY_ATTEMPT_LOG_MSG = "Retry attempt {attempt}/{total_attempts} with cookie source {source_index} for user {user_id}"
    COOKIES_YOUTUBE_RETRY_URL_NOT_TXT_LOG_MSG = "Cookie URL {source_index} is not .txt file"
    COOKIES_YOUTUBE_RETRY_FILE_TOO_LARGE_LOG_MSG = "Cookie file {source_index} is too large: {file_size} bytes"
    COOKIES_YOUTUBE_RETRY_SOURCE_WORKING_LOG_MSG = "Cookie source {source_index} is working, retrying download for user {user_id}"
    COOKIES_YOUTUBE_RETRY_SUCCESS_LOG_MSG = "Download retry successful with cookie source {source_index} for user {user_id}"
    COOKIES_YOUTUBE_RETRY_FAILED_ERROR_LOG_MSG = "Download retry failed with cookie source {source_index} for user {user_id}: {e}"
    COOKIES_YOUTUBE_RETRY_ERROR_COOKIE_RELATED_LOG_MSG = "Error is cookie-related, trying next source for user {user_id}"
    COOKIES_YOUTUBE_RETRY_ALL_SOURCES_FAILED_LOG_MSG = "All cookie sources failed for retry download for user {user_id}"
    COOKIES_YOUTUBE_CACHE_CLEARED_LOG_MSG = "Cleared all YouTube cookie validation cache"
    
    # Image command specific logs
    IMG_PAID_EMBEDDED_COVER_LOG_MSG = "[IMG PAID] Embedded cover into video: {video_path}"
    IMG_PAID_FAILED_EMBED_COVER_LOG_MSG = "[IMG PAID] Failed to embed cover into video {video_path}: {e}"
    IMG_LOG_OPEN_COPY_SENT_LOG_MSG = "[IMG LOG] Open copy sent to NSFW channel for history: {file_path}"
    IMG_LOG_FAILED_SEND_OPEN_COPY_LOG_MSG = "[IMG LOG] Failed to send open copy to NSFW channel: {e}"
    IMG_CACHE_SKIP_NSFW_LOG_MSG = "[IMG CACHE] Skipping cache save for NSFW content: index={album_index}, channel_type={channel_type}"
    IMG_CACHE_SAVE_ALBUM_LOG_MSG = "[IMG CACHE] About to save album: index={album_index}, ids={message_ids}, channel_type={channel_type}"
    IMG_CACHE_SAVE_REQUESTED_LOG_MSG = "[IMG CACHE] Save requested for index={album_index}, channel_type={channel_type}"
    IMG_CACHE_SAVE_FAILED_LOG_MSG = "[IMG CACHE] Save failed for index={album_index}: {e}"
    IMG_CONVERTED_WEBP_JPEG_LOG_MSG = "Converted WebP to JPEG: {file_path} -> {output_path}"
    IMG_FAILED_CONVERT_WEBP_LOG_MSG = "Failed to convert WebP: {result_stderr}"
    IMG_CONVERTED_WEBM_MP4_LOG_MSG = "Converted WebM to MP4: {file_path} -> {output_path}"
    IMG_FAILED_CONVERT_WEBM_LOG_MSG = "Failed to convert WebM: {result_stderr}"
    IMG_REMUXED_MP4_FASTSTART_LOG_MSG = "Remuxed MP4 with faststart: {file_path} -> {output_path}"
    IMG_FAILED_REMUX_MP4_LOG_MSG = "Failed to remux MP4 faststart: {result_stderr}"
    IMG_CONVERTED_TO_MP4_LOG_MSG = "Converted {file_ext} to MP4: {file_path} -> {output_path}"
    IMG_FAILED_CONVERT_TO_MP4_LOG_MSG = "Failed to convert {file_ext}: {result_stderr}"
    IMG_CONVERTED_TO_JPEG_LOG_MSG = "Converted {file_ext} to JPEG: {file_path} -> {output_path}"
    IMG_FAILED_CONVERT_TO_JPEG_LOG_MSG = "Failed to convert {file_ext}: {result_stderr}"
    IMG_CONVERSION_TIMEOUT_LOG_MSG = "Conversion timeout for {file_path}"
    IMG_CONVERSION_ERROR_LOG_MSG = "Conversion error for {file_path}: {e}"
    IMG_DEBUG_EXTRACT_URL_RANGE_LOG_MSG = "[IMG DEBUG] extract_url_range_tags result: parsed_url={parsed_url}, _s={_s}, _e={_e}, text={text}"
    IMG_DEBUG_RANGE_DETECTED_LOG_MSG = "[IMG DEBUG] Range detected: {_s}-{_e}"
    IMG_DEBUG_NO_RANGE_LOG_MSG = "[IMG DEBUG] No range detected in URL*start*end format"
    IMG_ERROR_GET_CACHED_POSTS_LOG_MSG = "Error getting cached image posts: {e}"
    IMG_CACHE_REPOSTING_ALBUM_LOG_MSG = "[IMG CACHE] Reposting album {album_idx} from channel {from_chat_id} to user {user_id}, message_ids={ids}"
    IMG_CACHE_FALLBACK_REPOSTING_LOG_MSG = "[IMG CACHE] Fallback reposting album {album_idx} from channel {from_chat_id} to user {user_id}, message_ids={ids}"
    IMG_CACHE_FAILED_FORWARD_ALBUM_LOG_MSG = "Failed to forward cached album {album_idx}: {_e}"
    IMG_CACHE_FORWARD_EARLY_FAILED_LOG_MSG = "Image cache forward (early) failed: {_e}"
    IMG_USER_ADMIN_LIMIT_LOG_MSG = "[IMG] User {user_id} is admin: {is_admin}, limit: {limit_text}"
    IMG_PRE_CLEANUP_START_LOG_MSG = "[IMG PRE-CLEANUP] Starting pre-cleanup of user directory: users/{user_id}"
    IMG_PRE_CLEANUP_COMPLETED_LOG_MSG = "[IMG PRE-CLEANUP] Pre-cleanup completed"
    IMG_PRE_CLEANUP_FAILED_LOG_MSG = "[IMG PRE-CLEANUP] Failed to perform pre-cleanup: {e}"
    IMG_BATCH_SMALL_TOTAL_LOG_MSG = "[IMG BATCH] Small total detected: {detected_total}, setting end cap to {manual_end_cap}"
    IMG_DOWNLOADING_RANGE_1_1_LOG_MSG = "Downloading with range 1-1 (total={detected_total}, start={current_start}, end={next_end})"
    IMG_CLI_DOWNLOAD_FAILED_LOG_MSG = "CLI download failed, trying Python API."
    IMG_PREPARED_RANGE_LOG_MSG = "Prepared range: {range_expr}"
    IMG_CLI_RANGE_FAILED_LOG_MSG = "CLI range download failed or rejected for {range_expr}, trying Python API."
    IMG_BATCH_TOTAL_TIMEOUT_LOG_MSG = "[IMG BATCH] Total timeout reached ({max_total_wait_time}s), stopping download after {total_elapsed:.1f}s"
    IMG_BATCH_INACTIVITY_TIMEOUT_LOG_MSG = "[IMG BATCH] Inactivity timeout reached ({max_inactivity_time}s), no new files found for {inactivity_elapsed:.1f}s"
    IMG_BATCH_STARTING_DOWNLOAD_RANGE_LOG_MSG = "[IMG BATCH] Starting download range {current_start}-{next_end}"
    IMG_BATCH_NO_FILES_DOWNLOADED_LOG_MSG = "[IMG BATCH] No files downloaded in range {current_start}-{next_end}, proceeding to file search"
    IMG_BATCH_FOUND_FILES_LOG_MSG = "[IMG BATCH] Successfully found {files_downloaded_in_range} files"
    IMG_BATCH_MEDIA_ENDED_LOG_MSG = "[IMG BATCH] Media appears to have ended - got {files_downloaded_in_range} files instead of expected {expected_files}"
    IMG_BATCH_SEARCHING_FILES_LOG_MSG = "[IMG BATCH] Searching for files in: {search_dir}"
    IMG_BATCH_FOUND_FILES_IN_DIR_LOG_MSG = "[IMG BATCH] Found {file_count} files in: {root}"
    IMG_BATCH_FOUND_SUBDIRS_LOG_MSG = "[IMG BATCH] Found subdirectories: {dirs}"
    IMG_BATCH_SKIPPING_ZERO_FILE_LOG_MSG = "[IMG BATCH] Skipping zero-size file: {file_path}"
    IMG_BATCH_OTHERS_DELETED_FILE_LOG_MSG = "[IMG BATCH OTHERS] Deleted file: {p}"
    IMG_BATCH_OTHERS_FAILED_DELETE_LOG_MSG = "[IMG BATCH OTHERS] Failed to delete {p}: {e}"
    IMG_BATCH_OTHERS_FAILED_ZERO_LOG_MSG = "[IMG BATCH OTHERS] Failed to zero out original {orig}: {e}"
    IMG_CLEANUP_START_LOG_MSG = "[IMG CLEANUP] Starting final cleanup of user directory: {run_dir}"
    IMG_CLEANUP_REMOVED_FILE_LOG_MSG = "[IMG CLEANUP] Removed file: {file_path}"
    IMG_CLEANUP_FAILED_REMOVE_LOG_MSG = "[IMG CLEANUP] Failed to remove {file_path}: {e}"
    IMG_CLEANUP_REMOVED_DIR_LOG_MSG = "[IMG CLEANUP] Removed empty directory: {dir_path}"
    
    # More IMG logs
    IMG_FATAL_ERROR_DETECTED_LOG_MSG = "Fatal error detected: {result}"
    IMG_BATCH_DOWNLOADED_FILES_LOG_MSG = "[IMG BATCH] Downloaded {files_downloaded_in_range} files in range {current_start}-{next_end} (expected {expected_files}) in {elapsed_time:.1f}s"
    IMG_MAIN_FAKE_MESSAGE_LOG_MSG = "[IMG MAIN] FAKE MESSAGE DETECTED - original_chat_id={original_chat_id}, is_private_chat={is_private_chat}"
    IMG_MAIN_NSFW_FLAG_LOG_MSG = "[IMG MAIN] nsfw_flag={nsfw_flag}, is_private_chat={is_private_chat}, media_group_len={media_group_len}"
    IMG_MAIN_PAID_LOGIC_LOG_MSG = "[IMG MAIN] Entering paid media logic for {item_count} items"
    IMG_PAID_SENDING_ALBUM_LOG_MSG = "[IMG PAID] Sending paid media album with {item_count} items"
    IMG_PAID_MEDIA_TYPES_LOG_MSG = "[IMG PAID] Media types: {media_types}"
    IMG_PAID_ATTEMPTING_ALBUM_LOG_MSG = "[IMG PAID] Attempting to send album with {item_count} items to user {user_id}"
    IMG_PAID_ALBUM_DETAILS_LOG_MSG = "[IMG PAID] Album details: star_count={star_count}, payload={payload}"
    
    # More IMG PAID and FALLBACK logs
    IMG_FAILED_SEND_PAID_MEDIA_ALBUM_LOG_MSG = "Failed to send paid media album: {e}"
    IMG_ALBUM_CAPTION_NORMALIZATION_SKIPPED_LOG_MSG = "[IMG] Album caption normalization skipped: {_e}"
    IMG_FLOODWAIT_SEND_MEDIA_GROUP_LOG_MSG = "FloodWait while send_media_group: waiting {wait_s}s and retrying (attempt {attempts}+1}/5)"
    IMG_CACHE_COPYING_ALBUM_LOG_MSG = "[IMG CACHE] Copying album to logs, orig_ids={orig_ids}"
    IMG_LOG_FAKE_MESSAGE_DETECTED_LOG_MSG = "[IMG LOG] FAKE MESSAGE DETECTED - original_chat_id={original_chat_id}, is_private_chat={is_private_chat}"
    
    # Video extractor logs
    VIDEO_EXTRACTOR_SAVED_FORMAT_LOG_MSG = "video_url_extractor: using saved format '{saved_format}', quality_key='{quality_key}'"
    
    # URL extractor logs
    URL_EXTRACTOR_VIDEO_EXTRACTOR_FAILED_LOG_MSG = "video_url_extractor failed, fallback to gallery-dl: {e}"
    URL_EXTRACTOR_GALLERY_DL_FALLBACK_FAILED_LOG_MSG = "gallery-dl fallback also failed: {e2}"
    URL_EXTRACTOR_NO_MATCHING_COMMAND_LOG_MSG = "{user_id} No matching command processed."
    URL_EXTRACTOR_ADD_GROUP_HELPER_CLOSED_LOG_MSG = "🤖 Add bot to group helper closed"
    URL_EXTRACTOR_ADD_GROUP_CALLBACK_ERROR_LOG_MSG = "Error in add_group_msg callback handler: {e}"
    URL_EXTRACTOR_REMOVED_FILE_LOG_MSG = "Removed file: {file_path}"
    URL_EXTRACTOR_FAILED_REMOVE_FILE_LOG_MSG = "Failed to remove file {file_path}: {e}"
    URL_EXTRACTOR_FAILED_CLEAR_YOUTUBE_CACHE_LOG_MSG = "Failed to clear YouTube cookie cache: {e}"
    
    # Magic.py logs
    MAGIC_ALLOWED_GROUP_CHECK_LOG_MSG = "[ALLOWED_GROUP_CHECK] chat_id={chat_id} allowed={allowed} list={list}"
    
    # Proxy command logs
    PROXY_CMD_ERROR_WRITING_FILE_LOG_MSG = "Error writing file {file_path}: {error}"
    PROXY_CMD_UNEXPECTED_ERROR_WRITING_FILE_LOG_MSG = "Unexpected error writing file {file_path}: {error}"
    PROXY_CMD_USER_REQUESTED_LOG_MSG = "[PROXY] User {user_id} requested proxy command"
    PROXY_CMD_USER_IS_ADMIN_LOG_MSG = "[PROXY] User {user_id} is admin: {is_admin}"
    PROXY_CMD_USER_IS_IN_CHANNEL_LOG_MSG = "[PROXY] User {user_id} is in channel: {is_in_channel}"
    PROXY_CMD_USER_ACCESS_DENIED_LOG_MSG = "[PROXY] User {user_id} access denied - not admin and not in channel"
    PROXY_CMD_USER_ACCESS_GRANTED_LOG_MSG = "[PROXY] User {user_id} access granted"
    PROXY_CMD_CALLBACK_LOG_MSG = "[PROXY] callback: {callback_data}"
    PROXY_CMD_ERROR_READING_FILE_LOG_MSG = "Error reading proxy file {proxy_file}: {error}"
    PROXY_CMD_UNEXPECTED_ERROR_READING_FILE_LOG_MSG = "Unexpected error reading proxy file {proxy_file}: {error}"
    PROXY_CMD_SELECT_PROXY_FOR_DOMAIN_LOG_MSG = "select_proxy_for_domain: URL={url}, extracted_domain={domain}"
    PROXY_CMD_PROXY_2_DOMAINS_LOG_MSG = "PROXY_2_DOMAINS: {domains}"
    PROXY_CMD_PROXY_DOMAINS_LOG_MSG = "PROXY_DOMAINS: {domains}"
    PROXY_CMD_DOMAIN_FOUND_IN_PROXY_2_LOG_MSG = "Domain {domain} found in PROXY_2_DOMAINS (or is subdomain), using proxy 2"
    PROXY_CMD_DOMAIN_FOUND_IN_PROXY_1_LOG_MSG = "Domain {domain} found in PROXY_DOMAINS (or is subdomain), using proxy 1"
    PROXY_CMD_DOMAIN_NOT_IN_LIST_LOG_MSG = "Domain {domain} not found in any proxy domain list"
    PROXY_CMD_ADD_PROXY_CALLED_LOG_MSG = "add_proxy_to_ytdl_opts called: user_id={user_id}, url={url}"
    PROXY_CMD_PROXY_CHECK_FOR_USER_LOG_MSG = "Proxy check for user {user_id}: {proxy_enabled}"
    PROXY_CMD_ADDED_PROXY_FOR_USER_LOG_MSG = "Added proxy for user {user_id}: {proxy_url}"
    PROXY_CMD_ADDED_DOMAIN_PROXY_LOG_MSG = "Added domain-specific proxy for {url}: {proxy_url}"
    
    # Database cache logs
    DB_FIREBASE_CACHE_ACCESS_LOG_MSG = "Firebase local-cache access: {path} -> {status}"
    DB_CONFIG_NOT_FOUND_LOG_MSG = "config.py not found at {path}"
    DB_FAILED_PERSIST_RELOAD_CACHE_EVERY_LOG_MSG = "Failed to persist RELOAD_CACHE_EVERY to config.py: {error}"
    DB_AUTO_CACHE_HANDLER_ERROR_LOG_MSG = "/auto_cache handler error: {error}"
    DB_QUALITY_KEY_EMPTY_LOG_MSG = "quality_key is empty, skipping cache save for playlist: {playlist_url}"
    DB_PLAYLIST_CACHE_PATH_INVALID_LOG_MSG = "PLAYLIST_CACHE_DB_PATH is invalid, skipping write for: {playlist_url}"
    DB_NORMALIZED_PLAYLIST_URLS_LOG_MSG = "Normalized playlist URLs: {urls}"
    
    # Limitter helper logs
    LIMITTER_CHANNEL_CHECK_MEMBERSHIP_LOG_MSG = "[CHANNEL_CHECK] Checking membership for user {user_id} in channel {channel}"
    LIMITTER_CHANNEL_CHECK_STATUS_LOG_MSG = "[CHANNEL_CHECK] User {user_id} status: {status}"
    LIMITTER_CHANNEL_CHECK_IS_MEMBER_LOG_MSG = "[CHANNEL_CHECK] User {user_id} is member of channel"
    LIMITTER_CHANNEL_CHECK_NOT_MEMBER_LOG_MSG = "[CHANNEL_CHECK] User {user_id} is not member of channel"
    LIMITTER_CHANNEL_CHECK_ERROR_LOG_MSG = "Error checking channel membership for user {user_id}: {error}"
    LIMITTER_SUBTITLE_LIMITS_CHECK_PASSED_LOG_MSG = "Subtitle limits check passed: duration={duration}s, size={size} bytes, quality={width}x{height}"
    LIMITTER_SUBTITLE_LIMITS_CHECK_ERROR_LOG_MSG = "Error checking subtitle limits: {error}"
    
    # Filesystem helper logs
    FILESYSTEM_FIREBASE_CLOSED_LOG_MSG = "Firebase connections closed successfully"
    FILESYSTEM_FIREBASE_CLOSE_ERROR_LOG_MSG = "Error closing Firebase connections: {error}"
    FILESYSTEM_SIGNAL_RECEIVED_LOG_MSG = "Received signal {signal}, shutting down gracefully..."
    FILESYSTEM_WAITING_THREADS_LOG_MSG = "Waiting for {count} active threads to finish"
    FILESYSTEM_WAITING_THREAD_LOG_MSG = "Waiting for thread {name} to finish..."
    FILESYSTEM_CLEANUP_ERROR_LOG_MSG = "Error during cleanup: {error}"
    FILESYSTEM_SHUTTING_DOWN_PYROGRAM_LOG_MSG = "Shutting down Pyrogram client..."
    FILESYSTEM_PYROGRAM_STOPPED_LOG_MSG = "Pyrogram client stopped successfully"
    FILESYSTEM_PYROGRAM_STOP_ERROR_LOG_MSG = "Error stopping Pyrogram client: {error}"
    FILESYSTEM_LOGGER_CLOSE_ERROR_LOG_MSG = "Error closing logger: {error}"
    FILESYSTEM_SHUTDOWN_COMPLETE_LOG_MSG = "Shutdown complete."
    FILESYSTEM_CLEANING_TEMP_FILES_LOG_MSG = "Cleaning up temporary files"
    FILESYSTEM_FAILED_REMOVE_TEMP_FILE_LOG_MSG = "Failed to remove temp file {filename}: {error}"
    FILESYSTEM_ERROR_CLEANING_USER_DIR_LOG_MSG = "Error cleaning user directory {user_dir}: {error}"
    FILESYSTEM_CLEANING_USER_TEMP_FILES_LOG_MSG = "Cleaning up temporary files for user {user_id}"
    FILESYSTEM_FILES_BEFORE_CLEANUP_LOG_MSG = "Files in {user_dir} before cleanup: {files}"
    FILESYSTEM_ERROR_LISTING_FILES_LOG_MSG = "Error listing files in {user_dir}: {error}"
    FILESYSTEM_REMOVED_TEMP_FILE_LOG_MSG = "Removed temp file: {filename}"
    FILESYSTEM_CLEANING_SUBTITLE_FILES_LOG_MSG = "Cleaning up subtitle files for user {user_id}"
    FILESYSTEM_REMOVED_SUBTITLE_FILE_LOG_MSG = "Removed subtitle file: {filename}"
    FILESYSTEM_FAILED_REMOVE_SUBTITLE_FILE_LOG_MSG = "Failed to remove subtitle file {filename}: {error}"
    FILESYSTEM_ERROR_CLEANING_SUBTITLE_FILES_LOG_MSG = "Error cleaning subtitle files for user {user_id}: {error}"
    FILESYSTEM_ERROR_CHECKING_DISK_SPACE_LOG_MSG = "Error checking disk space: {error}"
    FILESYSTEM_DIRECTORY_NOT_EXISTS_LOG_MSG = "Directory {directory} does not exist, nothing to remove"
    FILESYSTEM_REMOVED_FILE_LOG_MSG = "Removed file: {file_path}"
    FILESYSTEM_FAILED_REMOVE_FILE_LOG_MSG = "Failed to remove file {file_path}: {error}"
    FILESYSTEM_REMOVED_UNPROTECTED_DIR_LOG_MSG = "Removed unprotected directory: {item_path}"
    FILESYSTEM_FAILED_REMOVE_DIRECTORY_LOG_MSG = "Failed to remove directory {item_path}: {error}"
    FILESYSTEM_SKIPPED_PROTECTED_DIR_LOG_MSG = "Skipped protected directory: {item_path}"
    FILESYSTEM_MEDIA_CLEANUP_COMPLETED_LOG_MSG = "Media cleanup completed for user {user_id}"
    FILESYSTEM_CREATED_PROTECTION_FILE_LOG_MSG = "Created protection file: {protection_file}"
    FILESYSTEM_FAILED_CREATE_PROTECTION_FILE_LOG_MSG = "Failed to create protection file in {directory_path}: {error}"
    FILESYSTEM_REMOVED_PROTECTION_FILE_LOG_MSG = "Removed protection file: {protection_file}"
    FILESYSTEM_FAILED_REMOVE_PROTECTION_FILE_LOG_MSG = "Failed to remove protection file from {directory_path}: {error}"
    FILESYSTEM_ERROR_CHECKING_PROTECTION_FILE_LOG_MSG = "Error checking protection file in {directory_path}: {error}"
    FILESYSTEM_ERROR_CHECKING_PARALLEL_PERMISSION_LOG_MSG = "Error checking parallel download permission: {error}"
    
    # Args command logs
    ARGS_ERROR_READING_USER_ARGS_LOG_MSG = "Error reading user args for {user_id}: {error}"
    ARGS_ERROR_SAVING_USER_ARGS_LOG_MSG = "Error saving user args for {user_id}: {error}"
    ARGS_ERROR_CALLBACK_HANDLER_LOG_MSG = "Error in args callback handler: {error}"
    ARGS_ERROR_HANDLING_TEXT_INPUT_LOG_MSG = "Error handling args text input: {error}"
    ARGS_CRITICAL_ERROR_LOG_MSG = "args_text_handler critical error: {error}"
    
    # Cookies command logs
    COOKIES_ERROR_PROCESSING_SOURCE_LOG_MSG = "Error processing cookie source {idx} for user {user_id}: {error}"
    COOKIES_CLEARED_CACHE_LOG_MSG = "Cleared all YouTube cookie validation cache"
    
    # Format command logs
    FORMAT_CALLBACK_LOG_MSG = "[FORMAT] callback: {callback_data}"
    
    # Always ask menu logs
    ALWAYS_ASK_ERROR_READING_USER_ARGS_LOG_MSG = "Error reading user args for {user_id}: {error}"
    ALWAYS_ASK_IMPORTED_LOG_MSG = "always_ask_menu.py imported, app instance: {app_available}"
    ALWAYS_ASK_ERROR_RETRIEVING_CALLBACK_LOG_MSG = "Error retrieving original data from callback: {error}"
    ALWAYS_ASK_CALLBACK_RECEIVED_LOG_MSG = "[ASKF] callback received: {callback_data}"
    ALWAYS_ASK_PARSED_LOG_MSG = "[ASKF] parsed: kind={kind}, value={value}"
    
    # Down and up logs
    DOWN_UP_SKIPPING_CACHE_SEND_AS_FILE_LOG_MSG = "[VIDEO CACHE] Skipping cache save for user {user_id} with send_as_file enabled: url={url}, quality={quality}"
    DOWN_UP_IS_PORN_CHECK_LOG_MSG = "[FALLBACK] is_porn check for {url}: {is_nsfw}"
    DOWN_UP_SKIPPING_CACHE_NSFW_LOG_MSG = "[VIDEO CACHE] Skipping cache save for NSFW content: url={url}, quality={quality}, channel_type={channel_type}"
    DOWN_UP_ABOUT_TO_SAVE_VIDEO_LOG_MSG = "[VIDEO CACHE] About to save video: url={url}, quality={quality}, message_ids={message_ids}, channel_type={channel_type}"
    DOWN_UP_SAVE_REQUESTED_LOG_MSG = "[VIDEO CACHE] Save requested for quality={quality}, channel_type={channel_type}"
    DOWN_UP_SAVE_FAILED_LOG_MSG = "[VIDEO CACHE] Save failed for quality={quality}: {error}"
    
    # URL extractor logs
    URL_EXTRACTOR_DISTRACTOR_CALLED_LOG_MSG = "url_distractor called with text: {text}..."
    URL_EXTRACTOR_FOUND_ARGS_TEMPLATE_LOG_MSG = "Found potential args import template in message from user {user_id}"
    URL_EXTRACTOR_SETTINGS_CHECK_LOG_MSG = "has_settings_line: {has_settings_line}, has_forward_instruction: {has_forward_instruction}, has_separator: {has_separator}"
    URL_EXTRACTOR_CALLING_ARGS_IMPORT_LOG_MSG = "Calling args_import_handler for user {user_id}"
    URL_EXTRACTOR_ENGINE_ROUTER_ERROR_LOG_MSG = "Engine router error: {error}"
    
    # Thumbnail downloader logs
    THUMBNAIL_DOWNLOADER_VK_FAILED_LOG_MSG = "Failed to download VK thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_TIKTOK_FAILED_LOG_MSG = "Failed to download TikTok thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_TWITTER_FAILED_LOG_MSG = "Failed to download Twitter thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_FACEBOOK_FAILED_LOG_MSG = "Failed to download Facebook thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_PORNHUB_FAILED_LOG_MSG = "Failed to download Pornhub thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_INSTAGRAM_ATTEMPT_LOG_MSG = "Attempting to download Instagram thumbnail for video_id: {video_id}"
    THUMBNAIL_DOWNLOADER_INSTAGRAM_NOT_IMPLEMENTED_LOG_MSG = "Instagram thumbnail download not implemented"
    THUMBNAIL_DOWNLOADER_INSTAGRAM_FAILED_LOG_MSG = "Failed to download Instagram thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_VIMEO_FAILED_LOG_MSG = "Failed to download Vimeo thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_DAILYMOTION_FAILED_LOG_MSG = "Failed to download Dailymotion thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_RUTUBE_FAILED_LOG_MSG = "Failed to download Rutube thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_TWITCH_FAILED_LOG_MSG = "Failed to download Twitch thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_BOOSTY_FAILED_LOG_MSG = "Failed to download Boosty thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_ODNOKLASSNIKI_FAILED_LOG_MSG = "Failed to download Odnoklassniki thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_REDDIT_FAILED_LOG_MSG = "Failed to download Reddit thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_PIKABU_FAILED_LOG_MSG = "Failed to download Pikabu thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_YANDEX_DZEN_FAILED_LOG_MSG = "Failed to download Yandex.Dzen thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_GOOGLE_DRIVE_FAILED_LOG_MSG = "Failed to download Google Drive thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_REDTUBE_FAILED_LOG_MSG = "Failed to download Redtube thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_BILIBILI_FAILED_LOG_MSG = "Failed to download Bilibili thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_NICONICO_FAILED_LOG_MSG = "Failed to download Niconico thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_XVIDEOS_FAILED_LOG_MSG = "Failed to download XVideos thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_YOUPORN_FAILED_LOG_MSG = "Failed to download YouPorn thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_XHAMSTER_FAILED_LOG_MSG = "Failed to download XHamster thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_PORNTUBE_FAILED_LOG_MSG = "Failed to download PornTube thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_SPANKBANG_FAILED_LOG_MSG = "Failed to download SpankBang thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_YOUTUBE_FAILED_LOG_MSG = "Failed to download YouTube thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_XNXX_FAILED_LOG_MSG = "Failed to download XNXX thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_ONLYFANS_FAILED_LOG_MSG = "Failed to download OnlyFans thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_PATREON_FAILED_LOG_MSG = "Failed to download Patreon thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_SOUNDCLOUD_FAILED_LOG_MSG = "Failed to download SoundCloud thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_BANDCAMP_FAILED_LOG_MSG = "Failed to download Bandcamp thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_MIXCLOUD_FAILED_LOG_MSG = "Failed to download Mixcloud thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_DEEZER_FAILED_LOG_MSG = "Failed to download Deezer thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_SPOTIFY_FAILED_LOG_MSG = "Failed to download Spotify thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_APPLE_MUSIC_FAILED_LOG_MSG = "Failed to download Apple Music thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_TIDAL_FAILED_LOG_MSG = "Failed to download Tidal thumbnail: {e}"
    THUMBNAIL_DOWNLOADER_UNIVERSAL_CALLED_LOG_MSG = "Universal thumbnail downloader called for URL: {url}"
    THUMBNAIL_DOWNLOADER_SERVICE_DETECTED_LOG_MSG = "Detected service: {service}, video_id: {video_id}"
    THUMBNAIL_DOWNLOADER_NO_VIDEO_ID_LOG_MSG = "Could not extract video ID from URL: {url}"
    THUMBNAIL_DOWNLOADER_SUCCESS_LOG_MSG = "Successfully downloaded {service} thumbnail to {dest}"
    THUMBNAIL_DOWNLOADER_SERVICE_FAILED_LOG_MSG = "Service-specific thumbnail download failed for {service}, will use fallback"
    THUMBNAIL_DOWNLOADER_ERROR_LOG_MSG = "Error in universal thumbnail downloader: {e}"
    THUMBNAIL_DOWNLOADER_TELEGRAM_EMBED_FAILED_LOG_MSG = "Failed to get Telegram embed thumbnail: {e}"
    
    # Always Ask Menu Log Messages
    ALWAYS_ASK_ERROR_READING_AVAILABLE_FORMATS_FROM_CACHE_LOG_MSG = "Error reading available formats from cache"
    ALWAYS_ASK_ERROR_FILTERING_QUALITIES_LOG_MSG = "Error filtering qualities"
    ALWAYS_ASK_ERROR_SETTING_LINK_MODE_LOG_MSG = "Error setting link mode for user"
    ALWAYS_ASK_CALLBACK_LOG_MSG = "[ASKQ] callback"
    ALWAYS_ASK_CLEANED_UP_OLD_FORMAT_CACHE_LOG_MSG = "Cleaned up old format cache"
    ALWAYS_ASK_FAILED_TO_REMOVE_OLD_CACHE_FILE_LOG_MSG = "Failed to remove old cache file"
    ALWAYS_ASK_CLEANED_UP_OLD_FORMAT_CACHE_FILES_BEFORE_CLOSING_LOG_MSG = "Cleaned up old format cache files before closing menu"
    ALWAYS_ASK_ERROR_CLEANING_UP_OLD_FORMAT_CACHE_FILES_BEFORE_CLOSING_LOG_MSG = "Error cleaning up old format cache files before closing menu"
    ALWAYS_ASK_FAILED_TO_DELETE_ALWAYS_ASK_MENU_LOG_MSG = "Failed to delete Always Ask menu"
    ALWAYS_ASK_ERROR_SENDING_FORMATS_FILE_LOG_MSG = "Error sending formats file"
    ALWAYS_ASK_FALLBACK_DEBUG_ORIGINAL_MESSAGE_TEXT_LOG_MSG = "[ASKQ FALLBACK DEBUG] original_message.text"
    ALWAYS_ASK_FALLBACK_DEBUG_ORIGINAL_MESSAGE_CAPTION_LOG_MSG = "[ASKQ FALLBACK DEBUG] original_message.caption"
    ALWAYS_ASK_FALLBACK_DEBUG_URL_TEXT_LOG_MSG = "[ASKQ FALLBACK DEBUG] url_text"
    ALWAYS_ASK_FALLBACK_DEBUG_FOUND_RANGE_URL_LOG_MSG = "[ASKQ FALLBACK DEBUG] FOUND RANGE URL"
    ALWAYS_ASK_FALLBACK_DEBUG_NO_RANGE_FOUND_LOG_MSG = "[ASKQ FALLBACK DEBUG] NO RANGE FOUND, using url"
    ALWAYS_ASK_FALLBACK_IS_PORN_CHECK_LOG_MSG = "[ASKQ FALLBACK] is_porn check for"
    ALWAYS_ASK_FALLBACK_USER_FORCED_NSFW_TAG_DETECTED_LOG_MSG = "[ASKQ FALLBACK] User forced NSFW tag detected for"
    ALWAYS_ASK_FALLBACK_CONVERTING_RANGE_LOG_MSG = "[ASKQ FALLBACK] Converting range"
    ALWAYS_ASK_FALLBACK_NO_RANGE_DETECTED_LOG_MSG = "[ASKQ FALLBACK] No range detected, fallback_text"
    ALWAYS_ASK_FALLBACK_ADDED_NSFW_TAG_LOG_MSG = "[ASKQ FALLBACK] Added #nsfw tag for NSFW content"
    ALWAYS_ASK_FALLBACK_FAKE_MSG_DETAILS_LOG_MSG = "[ASKQ FALLBACK] fake_msg.chat.id"
    ALWAYS_ASK_FALLBACK_ORIGINAL_MESSAGE_TYPE_LOG_MSG = "[ASKQ FALLBACK] original_message type"
    ALWAYS_ASK_FALLBACK_ORIGINAL_MESSAGE_ATTRIBUTES_LOG_MSG = "[ASKQ FALLBACK] original_message attributes"
    ALWAYS_ASK_IMAGE_FALLBACK_FAILED_LOG_MSG = "[ASKQ] IMAGE fallback failed"
    ALWAYS_ASK_OPENING_SUBS_MENU_LOG_MSG = "[ASKQ] Opening SUBS menu for user"
    ALWAYS_ASK_NO_ORIGINAL_MESSAGE_FOUND_FOR_SUBS_MENU_LOG_MSG = "[ASKQ] No original message found for SUBS menu"
    ALWAYS_ASK_EXTRACTED_URL_LOG_MSG = "[ASKQ] Extracted URL"
    ALWAYS_ASK_CHECKING_SUBTITLE_AVAILABILITY_LOG_MSG = "[ASKQ] Checking subtitle availability for"
    ALWAYS_ASK_FOUND_LANGUAGES_LOG_MSG = "[ASKQ] Found languages - normal"
    ALWAYS_ASK_ERROR_CHECKING_SUBTITLES_LOG_MSG = "[ASKQ] Error checking subtitles"
    ALWAYS_ASK_NO_SUBTITLES_FOUND_LOG_MSG = "[ASKQ] No subtitles found for"
    ALWAYS_ASK_BUILDING_KEYBOARD_WITH_LANGUAGES_LOG_MSG = "[ASKQ] Building keyboard with"
    ALWAYS_ASK_SUCCESSFULLY_UPDATED_MESSAGE_WITH_SUBS_KEYBOARD_LOG_MSG = "[ASKQ] Successfully updated message with SUBS keyboard"
    ALWAYS_ASK_ERROR_UPDATING_MESSAGE_LOG_MSG = "[ASKQ] Error updating message"
    ALWAYS_ASK_CLEANED_UP_OLD_FORMAT_CACHE_FILES_DURING_NAVIGATION_LOG_MSG = "Cleaned up old format cache files during navigation"
    ALWAYS_ASK_ERROR_CLEANING_UP_OLD_FORMAT_CACHE_FILES_DURING_NAVIGATION_LOG_MSG = "Error cleaning up old format cache files during navigation"
    ALWAYS_ASK_CLEANED_UP_OLD_FORMAT_CACHE_FILES_BEFORE_RETURNING_TO_MAIN_MENU_LOG_MSG = "Cleaned up old format cache files before returning to main menu"
    ALWAYS_ASK_ERROR_CLEANING_UP_OLD_FORMAT_CACHE_FILES_BEFORE_RETURNING_TO_MAIN_MENU_LOG_MSG = "Error cleaning up old format cache files before returning to main menu"
    ALWAYS_ASK_PLAYLIST_WITH_RANGE_DETECTED_LOG_MSG = "Playlist with range detected, checking playlist cache for URL"
    ALWAYS_ASK_NO_CACHE_FOR_QUALITY_KEY_LOG_MSG = "askq_callback: no cache for quality_key"
    ALWAYS_ASK_FOUND_CACHE_WITH_BEST_QUALITY_LOG_MSG = "askq_callback: found cache with best quality, cached"
    ALWAYS_ASK_SKIPPING_CACHE_CHECK_FOR_PLAYLIST_LOG_MSG = "[VIDEO CACHE] Skipping cache check for playlist because Always Ask mode is enabled"
    ALWAYS_ASK_URL_ANALYSIS_LOG_MSG = "[VIDEO CACHE] URL analysis"
    
    # Subtitles Command Log Messages
    SUBS_429_TOO_MANY_REQUESTS_LOG_MSG = "429 Too Many Requests (attempt {attempt+1}/{MAX_RETRIES})"
    SUBS_FINAL_ATTEMPT_FAILED_429_LOG_MSG = "Final attempt failed due to 429"
    SUBS_DOWNLOAD_ERROR_LOG_MSG = "DownloadError: {e}"
    SUBS_UNEXPECTED_ERROR_LOG_MSG = "Unexpected error (attempt {attempt+1}/{MAX_RETRIES}): {e}"
    SUBS_VALID_SUBTITLES_LOG_MSG = "Valid subtitles ({subs_lang}), size={os.path.getsize(dst)}"
    SUBS_DOWNLOADED_TRACK_INVALID_LOG_MSG = "Downloaded track invalid after clean/convert"
    SUBS_COULD_NOT_DOWNLOAD_LOG_MSG = "Could not download/too small -> None"
    SUBS_NO_TRACK_URL_FOUND_LOG_MSG = "No track URL found in info for selected language"
    SUBS_NO_SUBTITLES_AVAILABLE_LOG_MSG = "No subtitles available for {subs_lang}"
    SUBS_LANGUAGE_NOT_FOUND_LOG_MSG = "Language {subs_lang} not found in {available_langs}"
    SUBS_TIMEDTEXT_429_LOG_MSG = "timedtext 429 ({url_tt}), sleep a bit"
    SUBS_TIMEDTEXT_HTTP_ERROR_LOG_MSG = "timedtext HTTP {r.status_code} ({url_tt})"
    SUBS_FORCE_FIX_ARABIC_ENCODING_LOG_MSG = "force_fix_arabic_encoding: {srt_path} re-encoded from {best_enc} -> utf-8"
    SUBS_FORCE_FIX_ARABIC_ENCODING_ERROR_LOG_MSG = "force_fix_arabic_encoding error {srt_path}: {e}"
    SUBS_429_TOO_MANY_REQUESTS_SLEEP_LOG_MSG = "429 Too Many Requests (attempt {attempt+1}/{MAX_RETRIES}) sleep {delay:.1f}s"
    SUBS_DOWNLOAD_ERROR_GETTING_SUBTITLES_LOG_MSG = "DownloadError while getting subtitles: {e}"
    SUBS_UNEXPECTED_ERROR_GETTING_SUBTITLES_LOG_MSG = "Unexpected error getting subtitles: {e}"
    SUBS_PLAYER_CLIENT_NO_CAPTIONS_LOG_MSG = "player_client={client or 'default'} has no captions, trying next..."
    SUBS_YOUTUBE_PLAYER_CLIENT_RETURNED_CAPTIONS_LOG_MSG = "youtube player_client={used_client} returned captions"
    SUBS_FILE_SUCCESSFULLY_ENCODED_UTF8_LOG_MSG = "File {srt_path} successfully encoded to UTF-8 (original encoding: {successful_encoding})"
    SUBS_BEST_ENCODING_FOUND_LOG_MSG = "The best encoding has been found: {encoding}"
    SUBS_REPLACEMENT_CHARACTERS_FOUND_LOG_MSG = "Replacement characters found in text, encoding {successful_encoding} may be incorrect"
    SUBS_SUCCESSFULLY_DECODED_LOG_MSG = "Successfully decoded with encoding: {encoding}"
    SUBS_FAILED_TO_DECODE_LOG_MSG = "Failed to decode with {encoding}: {e}"
    SUBS_LANG_MATCH_AUTO_TRANSLATED_LOG_MSG = "lang_match: auto-translated match found: {lang} for {user_lang}"
    SUBS_LANG_MATCH_DUPLICATE_LOG_MSG = "lang_match: duplicate match found: {lang} for {user_lang}"
    SUBS_LANG_MATCH_USER_LANG_LOG_MSG = "lang_match: user_lang='{user_lang}', available_langs={available_langs}"
    
    # NSFW Command Log Messages
    NSFW_USER_REQUESTED_COMMAND_LOG_MSG = "[NSFW] User {user_id} requested nsfw command"
    NSFW_USER_IS_ADMIN_LOG_MSG = "[NSFW] User {user_id} is admin: {is_admin}"
    NSFW_USER_IS_IN_CHANNEL_LOG_MSG = "[NSFW] User {user_id} is in channel: {is_in_channel}"
    
    # List Command Log Messages
    LIST_ERROR_IN_HELP_CALLBACK_LOG_MSG = "Error in list help callback: {e}"
    
    # Link Command Log Messages
    LINK_FAILED_COPY_GLOBAL_COOKIE_LOG_MSG = "Failed to copy global cookie file for user {user_id}: {e}"
    
    # Emoji Command Log Messages
    EMOJI_CLEAN_TRIGGERED_LOG_MSG = "🧹 Emoji triggered - cleaning all files and folders for user {user_id}"
    EMOJI_CLEAN_COMPLETED_LOG_MSG = "🧹 Emoji completed - all files and folders cleaned for user {user_id}"
    EMOJI_STATS_TRIGGERED_LOG_MSG = "📃 Emoji triggered - showing usage stats for user {user_id}"
    EMOJI_STATS_COMPLETED_LOG_MSG = "📃 Emoji completed - usage stats shown for user {user_id}"
    EMOJI_UNKNOWN_COMMAND_LOG_MSG = "Unknown emoji command: {mapped}"
    
    # File Operations Log Messages
    URL_EXTRACTOR_REMOVED_DIRECTORY_LOG_MSG = "Removed directory: {path}"
    URL_EXTRACTOR_ERROR_SCANNING_DIRECTORY_LOG_MSG = "Error scanning directory {path}: {e}"
    URL_EXTRACTOR_FAILED_CLEAR_YOUTUBE_CACHE_LOG_MSG = "Failed to clear YouTube cookie cache: {e}"
    URL_EXTRACTOR_GALLERY_DL_FALLBACK_LOG_MSG = "Gallery-dl fallback executed: {fallback_text}"
    URL_EXTRACTOR_LANGUAGE_CALLBACK_ERROR_LOG_MSG = "Language callback error: {e}"
    URL_EXTRACTOR_AUDIO_HINT_CALLBACK_ERROR_LOG_MSG = "Audio hint callback error: {e}"
    URL_EXTRACTOR_LINK_HINT_CALLBACK_ERROR_LOG_MSG = "Link hint callback error: {e}"
    LINK_USING_DOMAIN_SPECIFIC_PROXY_LOG_MSG = "Using domain-specific proxy for link extraction: {proxy_url}"
    LINK_FAILED_BUILD_PROXY_URL_LOG_MSG = "Failed to build proxy URL for domain-specific proxy"
    LINK_USER_PROXY_DISABLED_LOG_MSG = "User proxy disabled and domain doesn't require proxy - using direct connection for {url}"
    
    # Image Command Log Messages
    IMG_PAID_SEND_PAID_MEDIA_ALBUM_FAILED_LOG_MSG = "[IMG PAID] FAILED: send_paid_media album failed with error: {e}"
    IMG_PAID_ERROR_TYPE_LOG_MSG = "[IMG PAID] FAILED: Error type: {type(e)}"
    IMG_PAID_ERROR_DETAILS_LOG_MSG = "[IMG PAID] FAILED: Error details: {str(e)}"
    IMG_TAIL_ALBUM_CAPTION_NORMALIZATION_SKIPPED_LOG_MSG = "[IMG] Tail album caption normalization skipped: { _e }"
    
    # Args Command Log Messages
    ARGS_ATTEMPTING_IMPORT_SETTINGS_LOG_MSG = "Attempting to import settings from user {message.chat.id}"
    ARGS_PARSED_SETTINGS_LOG_MSG = "Parsed {len(parsed_args)} settings from message: {list(parsed_args.keys())}"
    ARGS_SETTING_REFERER_LOG_MSG = "Setting Referer for all services: {value}"
    ARGS_USER_SELECTED_MERGE_OUTPUT_FORMAT_LOG_MSG = "User {user_id} selected merge_output_format={value}"
    ARGS_FINAL_YTDLP_OPTIONS_LOG_MSG = "User {user_id} - Final yt-dlp options for {operation}:\n{opts_str}"


def get_logger_msg():
    """
    Get LoggerMsg instance
    """
    return LoggerMsg()

